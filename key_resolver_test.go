package db_test

import (
	"testing"

	"github.com/ccutch/datastore-model"
	"github.com/drborges/goexpect"
	"google.golang.org/appengine/aetest"
	"google.golang.org/appengine/datastore"
)

func TestKeyResolverExtractMetadataDefaults(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type Person struct {
		db.Model
		Name    string
		Country string
	}

	person := new(Person)
	person.Name = "Borges"

	metadata, err := db.NewKeyResolver(c).Resolve(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(metadata.Kind).ToBe("Person")
	expect(metadata.StringID).ToBe("")
	expect(metadata.IntID).ToBe(int64(0))
	expect(metadata.HasParent).ToBe(false)
	expect(metadata.IsAutoGenerated()).ToBe(true)
	expect(metadata.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverResolveEntityWithStringId(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type Person struct {
		db.Model `db:"People"`
		Name     string `db:"id"`
		Country  string
	}

	person := new(Person)
	person.Name = "Borges"

	metadata, err := db.NewKeyResolver(c).Resolve(person)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(metadata.Kind).ToBe("People")
	expect(metadata.IntID).ToBe(int64(0))
	expect(metadata.HasParent).ToBe(false)
	expect(metadata.StringID).ToBe("Borges")
	expect(metadata.IsAutoGenerated()).ToBe(false)
	expect(metadata.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverResolveEntityWithMissingStringId(t *testing.T) {
	type Person struct {
		db.Model `db:"People"`
		Name     string `db:"id"`
		Country  string
	}

	_, err := db.NewKeyResolver(nil).Resolve(new(Person))

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingStringId)
}

func TestKeyResolverResolveEntityWithIntId(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type CreditCard struct {
		db.Model `db:"CreditCards"`
		Number   int `db:"id"`
		Owner    string
	}

	card := new(CreditCard)
	card.Number = 123123

	metadata, err := db.NewKeyResolver(c).Resolve(card)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(metadata.Kind).ToBe("CreditCards")
	expect(metadata.StringID).ToBe("")
	expect(metadata.HasParent).ToBe(false)
	expect(metadata.IntID).ToBe(int64(123123))
	expect(metadata.IsAutoGenerated()).ToBe(false)
	expect(metadata.Parent).ToBe((*datastore.Key)(nil))
}

func TestKeyResolverResolveEntityWithMissingIntId(t *testing.T) {
	type CreditCard struct {
		db.Model `db:"CreditCards"`
		Number   int `db:"id"`
		Owner    string
	}

	_, err := db.NewKeyResolver(nil).Resolve(new(CreditCard))

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingIntId)
}

func TestKeyResolverExtractReturnsErrMultipleIdFields(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type CreditCard struct {
		db.Model
		Number int    `db:"id"`
		Owner  string `db:"id"`
	}

	card := new(CreditCard)
	card.Number = 123123
	card.Owner = "Borges"

	metadata, err := db.NewKeyResolver(c).Resolve(card)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMultipleIdFields)
	expect(metadata).ToBe((*db.Metadata)(nil))
}

func TestKeyResolverResolveEntityWithParentKey(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type CreditCard struct {
		db.Model `db:",has_parent"`
		Number   int `db:"id"`
		Owner    string
	}

	parentKey := datastore.NewIncompleteKey(c, "Parent", nil)
	card := new(CreditCard)
	card.Number = 123123
	card.SetParent(parentKey)

	metadata, err := db.NewKeyResolver(c).Resolve(card)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(metadata.HasParent).ToBe(true)
	expect(metadata.Parent).ToBe(parentKey)
}

func TestKeyResolverResolveEntityWithMissingParentKey(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type CreditCard struct {
		db.Model `db:",has_parent"`
		Number   int `db:"id"`
		Owner    string
	}

	card := new(CreditCard)
	card.Number = 123123

	metadata, err := db.NewKeyResolver(c).Resolve(card)

	expect := goexpect.New(t)
	expect(err).ToBe(db.ErrMissingParentKey)
	expect(metadata).ToBe((*db.Metadata)(nil))
}

func TestKeyResolverResolve(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type CreditCard struct {
		db.Model `db:", has_parent"`
		Number   int `db:"id"`
		Owner    string
	}

	parentKey := datastore.NewKey(c, "People", "Borges", 0, nil)
	card := new(CreditCard)
	card.Number = 123123
	card.SetParent(parentKey)

	_, err := db.NewKeyResolver(c).Resolve(card)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(card.Key().String()).ToBe("/People,Borges/CreditCard,123123")
}

func TestKeyResolverResolvesKeyMetadataInfoForEntityWithKeyAlreadySet(t *testing.T) {
	c, done, _ := aetest.NewContext()
	defer done()

	type Tag struct {
		db.Model
		Name string `db:"id"`
	}

	tag := &Tag{Name: "golang"}
	db.NewKeyResolver(c).Resolve(tag)
	resolverForEntityWithKey := db.NewKeyResolver(c)
	metadata, err := resolverForEntityWithKey.Resolve(tag)

	expect := goexpect.New(t)
	expect(err).ToBe(nil)
	expect(metadata.IntID).ToBe(int64(0))
	expect(metadata.Kind).ToBe("Tag")
	expect(metadata.HasParent).ToBe(false)
	expect(metadata.StringID).ToBe("golang")
	expect(metadata.IsAutoGenerated()).ToBe(false)
	expect(metadata.Parent).ToBe((*datastore.Key)(nil))
}
